---
lang: en
title: "Text Classification"
# subtitle: "Poornima Institute of Engineering & Technology"
author:
    - name: "Mario Graff"
      url: https://mgraffg.github.io
      affiliation: INFOTEC
    - name: "Daniela Moctezuma"
      url: https://dmocteo.github.io/
      affiliation: "CentroGEO"
    - name: "Eric S. Téllez"
      url: https://sadit.github.io
      affiliation: INFOTEC 
    - name: "Sabino Miranda-Jiménez"

format:
  revealjs:
    theme: simple
    chalkboard: true
    footer: <https://ingeotec.github.io>
---


# Who / Where 

## INGEOTEC

![](../IberLEF2023/ingeotec-cuatro.png){width=200}

::: {style="font-size: 70%; text-align: center;"}  
GitHub: <https://github.com/INGEOTEC>  
WebPage: <https://ingeotec.github.io/>
:::


## Aguascalientes, México

![](aguascalientes_edo.jpg){width=200}


# Introduction 

## Text Classification

::: {.callout-note icon=false}
# Definition
The aim is the **classification** of **documents** into a fixed number of predefined categories. 
::: 

::: {.callout-tip icon=false}
# Polarity
El día de mañana no podré ir con ustedes a la librería
:::

::: {.fragment style="font-size: 100%; text-align: center;"}
**Negative**
:::


## Text Classification Tasks

::: {.callout-tip icon=false}
# Polarity
Positive, Negative, Neutral
:::

::: {.callout-tip icon=false}
# Emotion (Multiclass)
* Anger, Joy, ...
* Intensity of an emotion
:::

::: {.callout-tip icon=false}
# Event (Binary)
* Violent
* Crime
:::


## Profiling

::: {.callout-tip icon=false}
# Gender
Man, Woman, Nonbinary, ...   
:::

::: {.callout-tip icon=false}
# Age
Child, Teen, Adult
:::

::: {.callout-tip icon=false}
# Language Variety
* Spanish: Spain, Cuba, Argentine, México, ...
* English: United States, England, ...
:::


# Approach 

## Machine Learning 

::: {.callout-note icon=false}
# Definition
Machine learning (ML) is a subfield of artificial intelligence that focuses on the development and implementation of algorithms capable of learning from data without being explicitly programmed.
:::

::: {.callout-note icon=false}
# Types of ML algorithms
* Unsupervised Learning
* Supervised Learning
* Reinforcement Learning
:::

## Supervised Learning (Multiclass) 
```{python}
#| echo: false
import plotly.express as px
from sklearn import decomposition
from sklearn.datasets import load_iris
import pandas as pd
import numpy as np

D, y = load_iris(return_X_y=True)
pca = decomposition.PCA(n_components=2).fit(D)
Dn = pca.transform(D)
df = pd.DataFrame(Dn, columns=['x', 'y'])
df['Class'] = y.astype(str)
fig = px.scatter(df, color='Class', x='x', y='y')
fig.update_layout(yaxis={'visible': True, 'showticklabels': False}, 
                  xaxis={'visible': True, 'showticklabels': False},
                  xaxis_title=None, yaxis_title=None)
fig.show()
```

## Supervised Learning (Binary) 

```{python}
#| echo: false
import plotly.express as px
from sklearn import decomposition
from sklearn.datasets import load_iris
import pandas as pd
import numpy as np

df['Class'] = ['P' if i == 0 else 'N' for i in y]
fig = px.scatter(df, color='Class', x='x', y='y')
fig.update_layout(yaxis={'visible': True, 'showticklabels': False}, 
                  xaxis={'visible': True, 'showticklabels': False},
                  xaxis_title=None, yaxis_title=None)
fig.show()
```

## Supervised Learning (Classification) 

```{python}
#| echo: false
import plotly.express as px
from sklearn.svm import LinearSVC
from sklearn import decomposition
import plotly.graph_objects as go
from sklearn.datasets import load_iris
import pandas as pd
import numpy as np

df['Class'] = ['P' if i == 0 else 'N' for i in y]
m = LinearSVC(dual='auto').fit(Dn, [1 if i == 0 else 0 for i in y])
w_1, w_2 = m.coef_[0]
w_0 = m.intercept_[0]
g_0 = [dict(x1=x, x2=y, tipo='g(x)=0')
       for x, y in zip(Dn[:, 0], (-w_0 - w_1 * Dn[:, 0]) / w_2)]
line = go.Scatter(x=Dn[:, 0], y=(-w_0 - w_1 * Dn[:, 0]) / w_2,
                  line=dict(color='darkgrey'),
                  showlegend=False)
fig = px.scatter(df, color='Class', x='x', y='y')

fig.update_layout(yaxis={'visible': True, 'showticklabels': False}, 
                  xaxis={'visible': True, 'showticklabels': False},
                  xaxis_title=None, yaxis_title=None)
fig.add_trace(line)
fig.show()
```

